01_Spring Framework.txt

MVC란?
	M (Model) : 데이터를 처리하는 부분
	V (View) : 화면을 담당하는 부분
	C (Controller) : 요청을 처리하는 부분으로 뷰와 모델 사이의 통신역할을 담당
	

# 프레임워크란?

- 프로젝트 개발에 필요한 전체적인 구조를 이미 만들어 놓은 것
- 개발자는 이미 완성된 프로젝트 구조에 빈칸만 채우는 형식으로 개발을 진행하게 된다
- 어느정도 수준의 품질이 항상 보장된다는 장점이 있다
- 개발 시간이 많이 단축된다

# 스프링 프레임워크

- 자바를 활용해 웹 개발을 진행하기 위한 프레임워크
- 자바의 다양한 디자인 패턴들이 이미 적용되어 있다

# 스프링의 주요 특징
	1.POJO(Plain Old Java Object)
	- JSP처럼 새로운 문법을 사용해야하는 JAVA의 사용을 지양한다.
	- 백엔드에 JSP를 이용하지 않고 순수 JAVA를 활용하려고 노력한다
	- 익숙치 않은 별도의 API를 사용하지 않음으로써 개발자의 혼란을 최소화 한다.
	
	2.의존성 주입 (DI, Dependency Injection)
	- 생성자를 사용하지 않아도 알아서 인스턴스를 생성해 코드를 마저 완성해준다.
	- new를 사용하는 코드를 금기시 한다
	
	※ 의존성
	
# 스프링 프로젝트 기본 구조
	- src/main/java : 자바 메인 코드를 작성하는 곳
	
	- src/main/resources : 자바 메인 코드를 실행할 때 필요한 자원들을 저장하는 곳
	
	- src/test/java : 자바 테스트 코드를 작성하는 곳
	
	- src/test/resources : 자바 테스트 코드를 실행할 때 필요한 자원들을 저장하는 곳
	
	* web.xml에서 가져다 쓰는 설정 파일들
	- /WEB-INF/spring/root-context.xml : 스프링 설정 파일
		: 이곳에 등록하는 것은 스프링 프로젝트 전체에서 접근할 수 있는 것이 된다
	
	- /WEB-INF/spring/appServlet/servlet-context.xml 
		: DispatcherServlet에서만 가져다 사용하는 설정 파일.
	      DispatcherServlet의 설정을 정의할 수 있다.
	      
	(클라이언트(사용자)의 모든 요청은 DispatcherServlet이 받는다.
	DispatcherServlet의 등장으로 web.xml의 역할이 상당히 축소되었는데,
	기존에는 모든 서블릿에 대해 URL패밍을 활용하기 위해서 web.xml에 모두 등록해주어야 헀지만, 
	DispatcherServlet이 해당 어플리케이션으로 들어오는 모든 요청을 핸들링해주면서 작업이 상당히 편리하게 되었다.)      
	 
	
	- /WEB-INF/views : 컨트롤러에서 처리한 후 포워딩 될 뷰 페이지들을 모아놓는 곳
	
	- pom.xml : 메이븐이 사용하는 xml. 이곳에 적혀있는대로 프로젝트를 관리해준다.
		
	* Maven은 프로젝트를 빌드하고 라이브러리를 관리해주는 도구입니다.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	